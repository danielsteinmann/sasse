- REST API
  https://github.com/funkbit/django-dynamicresponse
  => Gleiche Views
  https://bitbucket.org/jespern/django-piston
  => Neue Views (called Handlers)

- Zwei Tabellen nebeneinander:
  http://stackoverflow.com/questions/6548880/css-positioning-tables-next-to-each-other

- http://code.google.com/p/django-dynamic-fixture/

- Reset south history:
   https://groups.google.com/forum/#!msg/south-users/iIQT8ZWs2cI/GQ4kONoT5Q4J

- Neues URL Schema:
  - 2011/Faellbaumcup/einzelfahren/I
  - 2011/Faellbaumcup/einzelfahren/II-III-C-D-F
  - 2011/Faellbaumcup/einzelfahren/ranglisten
  - 2011/Faellbaumcup/einzelfahren/kranzlimiten
  - 2011/Faellbaumcup/einzelfahren/notenliste (Links pro Parcours: I | II-III-C-D-F)
  - 2011/Faellbaumcup/einzelfahren/I/notenliste
  - 2011/Faellbaumcup/einzelfahren/II-III-C-D-F/beurteilungsblaetter
  - 2011/Faellbaumcup/einzelfahren/II-III-C-D-F/startliste

  Validierung, dass eine Kategorie in einem Einzelfahren pro Wettkampf nur
  einmal vorkommen kann. Mit "Neues Einzelfahren" nach Kategorien fragen.


  Wettkämpfe  Fällbaucup-2011  Einzelfahren
  Überblick  Kranzlimiten  Ranglisten  Doppelstarter
  
   Parcours:  I
              II-III-F-D-C

              Parcours hinzufügen

   Startliste exportieren/importieren


  Wettkämpfe  Fällbaucup-2011  Einzelfahren  Kat-II-III-F-D-C
  Postenliste  Startliste  Beurteilungsblätter  Bestzeiten  Notenliste

  
- Duplicates in Mitglieder:
  - Brem Sven, Dietikon (5x)
  - Stutz Aline, Zürich (4x)
  Passierte in Bremgarten. Wahrscheinlich, weil kein Double Submit Check
  gemacht wurde.

- Double Submit (MitgliedForm, Startliste, Postenblatt):
  - GUID in Session merken
  - GUID Hidden Field
  - Submit (alles OK): GUID aus Session entfernen. Falls GUID nicht existiert,
    wurde das Form schon mal abgeschickt oder die Session ist abgelaufen.

- Startlisten export/import: Gelöschte auch transportieren. Irgendwie noch
  nicht klar, ob 'löschen' wirklich den Record löscht, oder einfach nur einen
  Status 'gelöscht' setzt. Einer in Status 'gelöscht' darf nirgends erscheinen
  (Notenliste/Rangliste). Am besten ist wahrscheinlich, dass man beim Import
  merkt, dass eine bestimmte Startnummer nicht kommt => diese Startnummer
  löschen.
  Zudem mit Zeitstempfel (Mutationsdatum) arbeiten: Nur solche Records ändern,
  die einen älteren Zeitstempfel haben. Bedingt, dass die Zeit auf den Compis
  gut übereinstimmt.

- Zusatzinfo in Wettkampf streichen. Dafür Disziplinen darstellen

- Allgemein: Wenn man einen Teilnehmern ändern muss, sollte es einen Link
  'Zurück zur Startliste' geben, damit man den Kontext nicht verliert. Siehe
  contrib.auth.view.login, wie man das richtig macht.

--
Startliste: Neuer Teilnehmer am Ende der Seite => Es wechselt nicht auf neue Seite
Eventuell http://code.google.com/p/django-pagination/issues/detail?id=54 brauchen.
--
Mitglieder via File Upload importieren
--
Teilnehmer: Als 'abstract' markieren, damit keine eigene Tabelle entsteht. Das
macht einige SQL Statements einfacher.
--
Rangliste: Kranzlimite Zeile wird in HTML nicht gezeigt, falls sie auf die
erste Zeile einer Seite fällt.
--
Installation als ein EXE File:
- pyinstaller.org
- py2exe.org
- http://misunderstandings.wordpress.com/2008/06/26/django-desktop-app/
- bitnami.org
--
Freeze Wettkampf, damit man nicht fälschlicherweise etwas eingeben
--
Richtzeit pro Kategorie:
- Default: Richtzeit für alle Kategorien gleicht (speichern schreibt den
  gleichen Wert für alle Kategorien)
- Falls man eine Kategorie wählt, Richtzeit nur für diese ändern.
--
Notenblatt ohne Zeitnote:
- Ohne Zeitnote und Total darstellen. Konfigurierbar in settings.py, damit auf
  Internet die Note immer gerechnet wird.
--
views.py anpassen: single select (siehe 'def postenblatt')
--
Autorisierung:
- Change Links ausblenden, falls man nicht autorisiert ist.
--
Notenliste: als CSV
--
Tests für Notenblatt
Tests für Kranzlimite
Tests für alle PDFs
--
ZeitInSekunden Custom Model Field schreiben. Somit sollte das
Templatetag 'bewertung' nicht mehr nötig sein. Zudem kann man
den Code von zeit2str in die Methode value_to_string() des
Custom Model Field verpacken.
--
Adminform 'Disziplinart':
- Einzelfahren
- Sektionsfahren
- Einzelschnüren
Adminform 'Disziplinart-Edit':
- Name: Einzelfahren
- Posten:
   - Anmeldung
   - Abfahrt an einer Stange
   - Durchfahrt
   - Zeit
Adminform 'Postenart-Edit':
- Name: Abfahrt an einer Stange
- Bewertungsarten:
   - Distanznote, Ziel, 9.5
   - Maximum, Stil, 10.0, nicht editierbar
   - Abzug, Stil, 10.0, -1

---
from itertools import *
from django.db import connection

def query_to_dicts(query_string, *query_args):
    """Run a simple query and produce a generator
    that returns the results as a bunch of dictionaries
    with keys for the column values selected.

    http://blog.doughellmann.com/2007/12/using-raw-sql-in-django.html
    """
    cursor = connection.cursor()
    cursor.execute(query_string, query_args)
    col_names = [desc[0] for desc in cursor.description]
    while True:
        row = cursor.fetchone()
        if row is None:
            break
        row_dict = dict(izip(col_names, row))
        yield row_dict
    return
--
Mögliche Apps:
- basis: Stammdaten
- event: Wettkampf, Disziplin, Posten, Bewertung, Teilnehmer, Richtzeit, Kranzlimite
- einzelfahren: Startliste
- sektionsfahren: Startliste
- spezialwettkaempfe: Schnüren, Schwimmen, Bootfährenbau
