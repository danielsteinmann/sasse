- Kranzlimite nicht sichbar wenn sie genau auf dem Seitenumbruch ist

- 25% Limite vorschlagen bei Spezialwettkämpfen (Schwimmen, Schnüren)

- Sektionsfahren Fahrchef: Muss möglich sein, den Namen des Fahrchef von beiden
  Gruppen zu ändern. Entweder Validierung übersteuern oder beide Gruppen
  gleichzeitig.

- Noteneingabe "Abbrechen und zurück" und "Speichern und zurück" (Denise)

- Streichliste Papierformular:
  - Header klarer machen
  - Beschreibung links statt rechts

- Startliste: Nicht mehr Aktive Mitglieder nicht auswählbar.

- Bei Ändern eines 'Schiffeinzel' auch alle Validierungen nochmals durchführen,
  aber übersteuern zulassen, damit z.B. die Kategorie fälschlicherweise nicht
  geändert wird oder das Doppelstart Flag nicht entfernt wird.

- Kontrollvisum im UI machen und einen Prüflink für Bewertungen ohne Visum
  => Check, ob es keine Noten gibt?

- 80% Regel, basierend auf Startliste Sektionsfahren (inkl. Reservefahrer)
   - Anzahl Reservefahrer zwischen Fahrchef und Zuschlägen eingeben
     (sind damit auch überzählige Fahrer, Kampfrichter, VL-Mitglieder gemeint?)
   - Import der Pflichtzahlen aus SPSV Datenbank; pro Wettkampf speichern
   - Auf Startliste Gruppen rot markieren, wo die 80% Regel verletzt ist

   => Was ist mit WKR Kapitel 2.2.1 "Alle Teilnehmer im Einzel auch in Sektion"?
      Soll das auch automatisch geprüft werden?

- Rayonwettfahren: Unter Einzwelwettfahren ein Menupunkt "Sektionsrangliste"
  einfügen. Nur sichtbar, falls die Pflichtzahlen für diesen Wettkampf
  vorhanden sind.  (Siehe 80% Regel)

- Doppeltstarter optional machen. Wird beim Wettfahren 7-er Club gebraucht.
  Dort kann einer zweimal mit einem aus einer anderen Sektion starten und wird
  genau gleich gewertet.

- Sektions Startliste Ausdruckbar machen (wie Einzelfahren), damit der Speaker
  ein sauberes Blatt hat.

- Toleranzwert für die Zeitnoten Richtzeit, Minimumzeit und Höchstzeit die
  Minimum und Höchstzeit werden zum Aufzeigen von Fehlern beim Zeitimport
  verwendet

- Richtzeiten auf Notenblatt ausgeben

- Sortierung ebenfalls in SQL machen:

    select punkt, stnr, doppel, ausg
         , case
             when ausg = 1 or disq = 1 then 99
             when kranz = 1 and doppel = 0 then 1
             when kranz = 1 and doppel = 1 then 2
             when kranz = 0 and doppel = 0 then 3
             when kranz = 0 and doppel = 1 then 4
             else 99
           end as typ
      from t
     order by typ, punkt desc, zeit asc
    /

- Bessere Wettfahren Struktur:

  Ist nicht einfach umzusetzen, weil die URL auf einen Wettkampf an vielen
  Orten gebraucht wird.

  - sektion (durchführende Sektion)
  - name (z.B. Fällbaum-Cup, Schweizermeisterschaft, Einzelwettfahren, JP-SM, Eidgenössisches)
  - von
  - bis
  - jpsm (ja/nein)
  - eidg (ja/nein)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                models.functions.TruncYear("von"),
                "sektion",
                "name",
                name="%(app_label)s_%(class)s_unique_date",
            ),
        ]

   Jahr  Wettkampf
   ----  ----------------------------
   2025  Schmerikon - Eidgenössisches
   2025  Aarau - Adler-Cup
   2025  Wynau - Einzelwettfahren
   2025  Solothurn - Chnüppu-Cup

   /2026/Aarau/Adler-Cup/
   /2025/Schmerikon/Eidgenössisches/
   /2025/Wynau/Einzelfahren/
   /2025/Dietikon/Glanzenburg-Cup/
   /2025/Bremgarten/Sektionsfahren/
   /2024/Bremgarten/Reuss-Cup/
   /2024/Ottenbach/Schweizermeisterschaft/
   /2024/Schönenwerd/Chnüppu-Cup/
   /2024/Dietikon/JP1-Challenge/

- Neues URL Schema:
  - 2011/Faellbaumcup/einzelfahren/I
  - 2011/Faellbaumcup/einzelfahren/II-III-C-D-F
  - 2011/Faellbaumcup/einzelfahren/II-III-C-D-F/startliste
  - 2011/Faellbaumcup/einzelfahren/II-III-C-D-F/beurteilungsblaetter
  - 2011/Faellbaumcup/einzelfahren/II-III-C-D-F/richtzeiten
  - 2011/Faellbaumcup/einzelfahren/II-III-C-D-F/notenliste
  - 2011/Faellbaumcup/einzelfahren/II-III-C-D-F/posten
  - 2011/Faellbaumcup/einzelfahren/ranglisten
  - 2011/Faellbaumcup/einzelfahren/kranzlimiten
  - 2011/Faellbaumcup/einzelfahren/doppelstarter
  - 2011/Faellbaumcup/einzelfahren/startliste-[export|import]

  - 2012/Bremgarten/sektionsfahren
  - 2012/Bremgarten/sektionsfahren/update
  - 2012/Bremgarten/sektionsfahren/startliste
  - 2012/Bremgarten/sektionsfahren/startliste [POST] => Neue Gruppe
  - 2012/Bremgarten/sektionsfahren/gruppe/add?sektion=Bremgarten
  - 2012/Bremgarten/sektionsfahren/gruppe/Bremgarten/1
  - 2012/Bremgarten/sektionsfahren/gruppe/Bremgarten/1/schiff [POST: neues Schiff, GET: brauchts nicht]
  - 2012/Bremgarten/sektionsfahren/gruppe/Bremgarten/1/schiff/1
  - 2012/Bremgarten/sektionsfahren/gruppe/Bremgarten/1/schiff/1/delete
  - 2012/Bremgarten/sektionsfahren/gruppe/Bremgarten/1/update [GET: alle Schiffe editable]
  - 2012/Bremgarten/sektionsfahren/gruppe/Bremgarten/1/delete
  - 2012/Bremgarten/sektionsfahren/rangliste
  - 2012/Bremgarten/sektionsfahren/posten

  Validierung, dass eine Kategorie in einem Einzelfahren pro Wettkampf nur
  einmal vorkommen kann. Mit "Neues Einzelfahren" nach Kategorien fragen.


  Wettkämpfe  Fällbaucup-2011  Einzelfahren
  Überblick  Kranzlimiten  Ranglisten  Doppelstarter

   Parcours:  I
              II-III-F-D-C

              Parcours hinzufügen


  Wettkämpfe  Fällbaucup-2011  Einzelfahren  Kat-II-III-F-D-C
  Postenliste  Startliste  Beurteilungsblätter  Bestzeiten  Notenliste

===

cat remove.txt | while read old new name; do sed -e "s,_OLD_,$old," -e "s,_NEW_,$new," dups_template.sql; done > delete_dups.sql

Kategorie C/D Einzelfahren CSV Export
   echo "\copy ($(paste -s x.sql)) to stdout with delimiter ';' csv header encoding 'latin1'" | psql -U postgres -d spsv

- Zwei Tabellen nebeneinander:
  http://stackoverflow.com/questions/6548880/css-positioning-tables-next-to-each-other

http://stackoverflow.com/questions/1406025/no-pg-hba-conf-entry-for-host
http://stackoverflow.com/questions/10454002/can-postgresql-copy-read-csv-from-a-remote-location
===
--
from itertools import *
from django.db import connection

def query_to_dicts(query_string, *query_args):
    """Run a simple query and produce a generator
    that returns the results as a bunch of dictionaries
    with keys for the column values selected.

    http://blog.doughellmann.com/2007/12/using-raw-sql-in-django.html
    """
    cursor = connection.cursor()
    cursor.execute(query_string, query_args)
    col_names = [desc[0] for desc in cursor.description]
    while True:
        row = cursor.fetchone()
        if row is None:
            break
        row_dict = dict(izip(col_names, row))
        yield row_dict
    return
--
Mögliche Apps:
- basis: Stammdaten
- event: Wettkampf, Disziplin, Posten, Bewertung, Teilnehmer, Richtzeit, Kranzlimite
- einzelfahren: Startliste
- sektionsfahren: Startliste
- spezialwettkaempfe: Schnüren, Schwimmen, Bootfährenbau


---

from django.db.models import Sum

f = Schiffeinzel.objects.filter(disziplin__id=1, startnummer__in=[5,10]) \
        .extra(tables=['bewertung_calc'],
                where=["bewertung_calc.teilnehmer_id = sasse_teilnehmer.id"])

f = Schiffeinzel.objects.filter(disziplin__id=1, startnummer__in=[5,6,7,8,9,10]) \
        .values("startnummer", "steuermann__name", "vorderfahrer__name") \
        .annotate(tot_zeit=Sum("bewertungcalc__zeit"),
                  tot_note=Sum("bewertungcalc__note")) \
        .order_by('-tot_note', 'tot_zeit')[1:3]


class BewertungCalc(models.Model):
    teilnehmer = models.ForeignKey('Teilnehmer')
    posten = models.ForeignKey('Posten')
    bewertungsart = models.ForeignKey('Bewertungsart')
    zeit = models.DecimalField(max_digits=6, decimal_places=2, default=0)
    note = models.DecimalField(max_digits=6, decimal_places=1, default=0)
    richtzeit = models.DecimalField(max_digits=6, decimal_places=2, default=0)

    class Meta:
        managed = False
        db_table = "bewertung_calc"

